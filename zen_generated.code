<GENERATED-CODE>
I will provide a step-by-step guide to refactor the import logic for better testability and maintainability.

1.  **Create a new file** `/home/krwhynot/projects/crispy-crm/src/atomic-crm/contacts/contactImport.logic.ts` to house the pure business logic, separating it from React hooks.
2.  **Update the main hook** `/home/krwhynot/projects/crispy-crm/src/atomic-crm/contacts/useContactImport.tsx` to use the new logic file, simplifying its implementation.
3.  **Update the E2E test script** `/home/krwhynot/projects/crispy-crm/scripts/test-import-e2e.mjs` to import and use the shared logic, eliminating code duplication and making the test more reliable.
4.  **Update the dialog component** `/home/krwhynot/projects/crispy-crm/src/atomic-crm/contacts/ContactImportDialog.tsx` to use the new centralized helper function.

Let's start with the new logic file.

<NEWFILE: /home/krwhynot/projects/crispy-crm/src/atomic-crm/contacts/contactImport.logic.ts>
```typescript
import type { ContactImportSchema } from "./useContactImport";
import type { DataQualityDecisions } from "./ContactImportPreview";
import { importContactSchema } from "../validation/contacts";

/**
 * A consistent utility to check if a contact record is an organization-only entry.
 * An org-only entry has an organization name but lacks both first and last names.
 * @param contact The contact data to check.
 * @returns True if the contact is an organization-only entry.
 */
export function isOrganizationOnlyEntry(contact: Partial<ContactImportSchema>): boolean {
  const hasOrgName = contact.organization_name && String(contact.organization_name).trim();
  const hasFirstName = contact.first_name && String(contact.first_name).trim();
  const hasLastName = contact.last_name && String(contact.last_name).trim();

  return !!(hasOrgName && !hasFirstName && !hasLastName);
}

/**
 * Applies data quality transformations to a set of contacts based on user decisions.
 * Currently handles auto-filling placeholder contacts for organization-only entries.
 *
 * @param contacts The array of contacts to transform.
 * @param decisions The user's data quality choices.
 * @returns An object containing the transformed contacts and metadata about the transformation.
 */
export function applyDataQualityTransformations(
  contacts: ContactImportSchema[],
  decisions: DataQualityDecisions = {
    importOrganizationsWithoutContacts: false,
    importContactsWithoutContactInfo: false,
  },
) {
  const autoFilledContacts = new Set<number>();

  const transformedContacts = contacts.map((contact, index) => {
    const transformed = { ...contact };

    // Auto-fill placeholder contact if the user approved this action.
    if (isOrganizationOnlyEntry(transformed) && decisions.importOrganizationsWithoutContacts) {
      transformed.first_name = "General";
      transformed.last_name = "Contact";
      autoFilledContacts.add(index);
    }

    return transformed;
  });

  return {
    transformedContacts,
    autoFilledCount: autoFilledContacts.size,
    wasAutoFilled: (index: number) => autoFilledContacts.has(index),
  };
}

/**
 * Validates a batch of contacts that have already been transformed.
 *
 * @param contacts The transformed contacts to validate.
 * @returns An object containing successfully validated data and detailed errors.
 */
export function validateTransformedContacts(contacts: ContactImportSchema[]) {
  const validationResults = contacts.map((contact, index) => {
    const result = importContactSchema.safeParse(contact);
    return {
      index,
      contact,
      success: result.success,
      error: result.success ? null : result.error,
    };
  });

  const successful = validationResults
    .filter(r => r.success)
    .map(r => ({ ...r.contact, originalIndex: r.index }));

  const failed = validationResults
    .filter(r => !r.success)
    .map(r => ({
      originalIndex: r.index,
      data: r.contact,
      errors: r.error!.issues.map(issue => ({
        field: issue.path.join("."),
        message: issue.message,
      })),
    }));

  return { successful, failed };
}
```
</NEWFILE>

Next, let's refactor `useContactImport.tsx` to consume this logic. The `processBatch` function becomes much simpler.

<UPDATED_EXISTING_FILE: /home/krwhynot/projects/crispy-crm/src/atomic-crm/contacts/useContactImport.tsx>
```typescript
import type { DataProvider } from "ra-core";
import { useDataProvider, useGetIdentity } from "ra-core";
import { useCallback, useMemo } from "react";
import type { Organization, Tag } from "../types";
import { mapHeadersToFields, isFullNameColumn, findCanonicalField } from "./columnAliases";
import { importContactSchema } from "../validation/contacts";
import { ZodError } from "zod";
import { applyDataQualityTransformations, validateTransformedContacts } from "./contactImport.logic";

export interface ContactImportSchema {
  first_name: string;
  last_name: string;
  gender?: string;
  title?: string;
  organization_name: string; // Primary organization (mandatory)
  email_work?: string;
  email_home?: string;
  email_other?: string;
  phone_work?: string;
  phone_home?: string;
  phone_other?: string;
  first_seen?: string;
  last_seen?: string;
  tags?: string;
  linkedin_url?: string;
  notes?: string; // Contact notes text field
}

export interface FieldError {
  field: string;
  message: string;
  value?: any;
}

export interface ImportError {
  row: number;
  data: any;
  errors: FieldError[]; // Changed from 'reason: string' to support multiple errors
}

export interface ImportResult {
  totalProcessed: number;
  successCount: number;
  skippedCount: number;
  failedCount: number;
  errors: ImportError[];
  duration: number;
  startTime: Date;
  endTime: Date;
}

export interface DataQualityDecisions {
  importOrganizationsWithoutContacts: boolean;
  importContactsWithoutContactInfo: boolean;
}

export interface ImportOptions {
  preview?: boolean;  // If true, validate only without database writes
  onProgress?: (current: number, total: number) => void;  // Progress callback
  startingRow?: number;  // The absolute starting row number for this batch (1-indexed)
  dataQualityDecisions?: DataQualityDecisions;  // User decisions about data quality issues
}

export function useContactImport() {
  const today = new Date().toISOString();
  const { identity } = useGetIdentity();
  const dataProvider = useDataProvider();

  // organization cache to avoid creating the same organization multiple times and costly roundtrips
  // Cache is dependent of dataProvider, so it's safe to use it as a dependency
  const organizationsCache = useMemo(
    () => new Map<string, Organization>(),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [dataProvider],
  );
  const getOrganizations = useCallback(
    async (names: string[], preview = false) =>
      preview
        ? validateOrganizationNames(names)
        : fetchRecordsWithCache<Organization>(
            "organizations",
            organizationsCache,
            names,
            (name) => ({
              name,
              created_at: new Date().toISOString(),
              sales_id: identity?.id,
            }),
            dataProvider,
          ),
    [organizationsCache, identity?.id, dataProvider],
  );

  // Tags cache to avoid creating the same tag multiple times and costly roundtrips
  // Cache is dependent of dataProvider, so it's safe to use it as a dependency
  // eslint-disable-next-line react-hooks/exhaustive-deps
  const tagsCache = useMemo(() => new Map<string, Tag>(), [dataProvider]);
  const getTags = useCallback(
    async (names: string[], preview = false) =>
      preview
        ? validateTagNames(names)
        : fetchRecordsWithCache<Tag>(
            "tags",
            tagsCache,
            names,
            (name) => ({
              name,
              color: "gray",
            }),
            dataProvider,
          ),
    [tagsCache, dataProvider],
  );

  const processBatch = useCallback(
    async (batch: ContactImportSchema[], options: ImportOptions = {}): Promise<ImportResult> => {
      const { preview = false, onProgress, startingRow = 1, dataQualityDecisions } = options;
      console.log("processBatch called with:", { batchSize: batch.length, preview, startingRow, dataQualityDecisions });
      const startTime = new Date();
      const errors: ImportError[] = [];
      let successCount = 0;
      let skippedCount = 0;
      const totalProcessed = batch.length;

      // Report progress if callback provided
      if (onProgress) {
        onProgress(0, totalProcessed);
      }

      // 1. Apply data quality transformations based on user decisions
      const { transformedContacts } = applyDataQualityTransformations(batch, dataQualityDecisions);

      // 2. Validate the entire transformed batch
      const { successful, failed } = validateTransformedContacts(transformedContacts);

      // Immediately add validation failures to the error list
      failed.forEach(failure => {
        errors.push({
          row: startingRow + failure.originalIndex,
          data: failure.data,
          errors: failure.errors,
        });
      });

      // 3. Fetch related records (organizations, tags) for valid contacts only
      const [organizations, tags] = await Promise.all([
        getOrganizations(
          successful
            .map((contact) => contact.organization_name?.trim())
            .filter((name): name is string => !!name),
          preview,
        ),
        getTags(successful.flatMap((contact) => parseTags(contact.tags)), preview),
      ]);

      // 4. Process all valid contacts with Promise.allSettled
      const results = await Promise.allSettled(
        successful.map(async (contactData, index) => {
          const rowNumber = startingRow + contactData.originalIndex;
          const rowErrors: FieldError[] = [];

          const {
            first_name,
            last_name,
            gender,
            title,
            email_work,
            email_home,
            email_other,
            phone_work,
            phone_home,
            phone_other,
            first_seen,
            last_seen,
            organization_name,
            tags: tagNames,
            linkedin_url,
            notes,
          } = contactData;

          // Organization logic check
          const trimmedOrgName = String(organization_name || '').trim();
          const organization = organizations.get(trimmedOrgName);
          if (trimmedOrgName && !organization?.id && !preview) {
            rowErrors.push({
              field: "organization_name",
              message: `Failed to find or create organization "${trimmedOrgName}"`,
              value: trimmedOrgName,
            });
          }

          if (rowErrors.length > 0) {
            return {
              rowNumber,
              success: false,
              errors: rowErrors,
              data: contactData,
            };
          }

          try {
            const email = [
              { email: email_work, type: "Work" },
              { email: email_home, type: "Home" },
              { email: email_other, type: "Other" },
            ].filter(({ email }) => email);

            const phone = [
              { number: phone_work, type: "Work" },
              { number: phone_home, type: "Home" },
              { number: phone_other, type: "Other" },
            ].filter(({ number }) => number);

            const tagList = parseTags(tagNames)
              .map((name) => tags.get(name))
              .filter((tag): tag is Tag => !!tag);

            const contactPayload = {
              first_name,
              last_name,
              gender,
              title,
              email,
              phone,
              first_seen: first_seen ? new Date(first_seen).toISOString() : today,
              last_seen: last_seen ? new Date(last_seen).toISOString() : today,
              tags: preview ? [] : tagList.map((tag) => tag.id),
              sales_id: identity?.id,
              linkedin_url,
              notes,
              organization_id: organization?.id,
              avatar: undefined,
            };

            if (preview) {
              await dataProvider.create("contacts", {
                data: contactPayload,
                meta: { dryRun: true },
              });
            } else {
              await dataProvider.create("contacts", {
                data: contactPayload,
              });
            }

            return { rowNumber, success: true };
          } catch (error: any) {
            // Catch errors from dataProvider (e.g., unique constraints)
            const finalErrors: FieldError[] = [];
            if (error instanceof ZodError) {
              error.issues.forEach((issue) => {
                finalErrors.push({
                  field: issue.path.join("."),
                  message: issue.message,
                });
              });
            } else if (error.body?.errors) {
              for (const [field, message] of Object.entries(error.body.errors)) {
                finalErrors.push({ field, message: String(message) });
              }
            } else {
              finalErrors.push({
                field: "general",
                message: error.message || "Unknown error during record creation",
              });
            }
            return { rowNumber, success: false, errors: finalErrors, data: contactData };
          } finally {
            if (onProgress) {
              onProgress(index + 1 + failed.length, totalProcessed);
            }
          }
        }),
      );

      // 5. Tally results
      results.forEach((result) => {
        if (result.status === "fulfilled") {
          const value = result.value as any;
          if (value.success) {
            successCount++;
          } else {
            errors.push({
              row: value.rowNumber,
              data: value.data,
              errors: value.errors,
            });
          }
        } else {
          // This case is less likely now but kept for safety
          errors.push({
            row: 0, // Cannot determine row number here
            data: {},
            errors: [{ field: "processing", message: result.reason?.message || "Unknown processing error" }],
          });
        }
      });

      const endTime = new Date();
      const finalResult = {
        totalProcessed,
        successCount,
        skippedCount,
        failedCount: errors.length,
        errors,
        duration: endTime.getTime() - startTime.getTime(),
        startTime,
        endTime,
      };

      console.log("processBatch returning:", finalResult);
      return finalResult;
    },
    [dataProvider, getOrganizations, getTags, identity?.id, today],
  );

  return processBatch;
}

const fetchRecordsWithCache = async function <T>(
  resource: string,
  cache: Map<string, T>,
  names: string[],
  getCreateData: (name: string) => Partial<T>,
  dataProvider: DataProvider,
) {
  const trimmedNames = [...new Set(names.map((name) => name.trim()))];
  const uncachedRecordNames = trimmedNames.filter((name) => !cache.has(name));

  // check the backend for existing records
  if (uncachedRecordNames.length > 0) {
    const response = await dataProvider.getList(resource, {
      filter: {
        "name@in": `(${uncachedRecordNames
          .map((name) => `"${name}"`)
          .join(",")})`,
      },
      pagination: { page: 1, perPage: trimmedNames.length },
      sort: { field: "id", order: "ASC" },
    });
    for (const record of response.data) {
      cache.set(record.name.trim(), record);
    }
  }

  // create missing records in parallel
  await Promise.all(
    uncachedRecordNames.map(async (name) => {
      if (cache.has(name)) return;
      const response = await dataProvider.create(resource, {
        data: getCreateData(name),
      });
      cache.set(name, response.data);
    }),
  );

  // now all records are in cache, return a map of all records
  return trimmedNames.reduce((acc, name) => {
    acc.set(name, cache.get(name) as T);
    return acc;
  }, new Map<string, T>());
};

const parseTags = (tags: string | undefined) =>
  tags
    ?.split(",")
    ?.map((tag: string) => tag.trim())
    ?.filter((tag: string) => tag) ?? [];

/**
 * Validate organization names for preview mode
 * Returns a Map similar to fetchRecordsWithCache but without database operations
 */
const validateOrganizationNames = async (names: string[]): Promise<Map<string, Organization>> => {
  const trimmedNames = [...new Set(names.map((name) => name.trim()))];
  const result = new Map<string, Organization>();

  // In preview mode, we just create placeholder organizations
  // to indicate they would be created during actual import
  for (const name of trimmedNames) {
    result.set(name, {
      id: `preview-org-${name}`,
      name,
      created_at: new Date().toISOString(),
    } as Organization);
  }

  return result;
};

/**
 * Validate tag names for preview mode
 * Returns a Map similar to fetchRecordsWithCache but without database operations
 */
const validateTagNames = async (names: string[]): Promise<Map<string, Tag>> => {
  const trimmedNames = [...new Set(names.map((name) => name.trim()))];
  const result = new Map<string, Tag>();

  // In preview mode, we just create placeholder tags
  // to indicate they would be created during actual import
  for (const name of trimmedNames) {
    result.set(name, {
      id: `preview-tag-${name}`,
      name,
      color: "gray",
    } as Tag);
  }

  return result;
};
```
</UPDATED_EXISTING_FILE>

Now, we can dramatically simplify the E2E test script. It no longer needs to contain any business logic.

<UPDATED_EXISTING_FILE: /home/krwhynot/projects/crispy-crm/scripts/test-import-e2e.mjs>
```javascript
#!/usr/bin/env node
/**
 * End-to-End Import Test (Simulates Browser Import Flow)
 * Tests the data quality feature without requiring browser interaction
 */

import fs from 'fs';
import Papa from 'papaparse';
// Note: This assumes your build setup allows importing TS/X files from a .mjs script.
// You might need to run this via a test runner like Vitest or ts-node if direct import fails.
import {
  applyDataQualityTransformations,
  validateTransformedContacts,
} from '../src/atomic-crm/contacts/contactImport.logic.js';

// ============================================================================
// COLUMN MAPPING AND DATA TRANSFORMATION (UNCHANGED)
// This part is specific to the CSV parsing step.
// ============================================================================

const COLUMN_ALIASES = {
  'Organizations': 'organization_name',
  'Organizations (DropDown)': 'organization_name',
  'Company': 'organization_name',
  'Organization': 'organization_name',
  'FULL NAME (FIRST, LAST)': '_full_name_source_',
  'Full Name': '_full_name_source_',
  'Name': '_full_name_source_',
  'EMAIL': 'email_work',
  'Email': 'email_work',
  'Work Email': 'email_work',
  'PHONE': 'phone_work',
  'Phone': 'phone_work',
  'Work Phone': 'phone_work',
  'POSITION': 'title',
  'POSITION (DropDown)': 'title',
  'Position': 'title',
  'Title': 'title',
  'LINKEDIN': 'linkedin_url',
  'LinkedIn': 'linkedin_url',
  'NOTES': 'notes',
  'Notes': 'notes',
};

function mapHeadersToFields(headers) {
  const mapped = {};
  headers.forEach(header => {
    if (!header) return;
    const normalized = String(header).trim();
    mapped[header] = COLUMN_ALIASES[normalized] || normalized.toLowerCase().replace(/\s+/g, '_');
  });
  return mapped;
}

function transformHeaders(headers) {
  const mappings = mapHeadersToFields(headers);
  return headers.map(header => {
    if (!header) return header;
    return mappings[header] || header;
  });
}

function transformData(rawData) {
  if (rawData.length < 4) {
    throw new Error('CSV file too short');
  }

  const headers = rawData[2];
  const transformedHeaders = transformHeaders(headers);
  const dataRows = rawData.slice(3);

  return dataRows.map(row => {
    const obj = {};
    transformedHeaders.forEach((header, index) => {
      // Handle full name splitting
      if (header === '_full_name_source_') {
        const fullName = row[index] || '';
        const nameParts = fullName.trim().split(/\s+/);

        if (nameParts.length === 0 || fullName.trim() === '') {
          obj.first_name = '';
          obj.last_name = '';
        } else if (nameParts.length === 1) {
          obj.first_name = '';
          obj.last_name = nameParts[0];
        } else {
          obj.first_name = nameParts[0];
          obj.last_name = nameParts.slice(1).join(' ');
        }
      } else {
        obj[header] = row[index];
      }
    });
    return obj;
  });
}

// ============================================================================
// MAIN TEST FUNCTION
// ============================================================================

async function runE2ETest() {
  console.log('🧪 Starting End-to-End Import Test (Automated)\n');

  const csvPath = '/home/krwhynot/projects/crispy-crm/data/import_test_focused.csv';
  const csvContent = fs.readFileSync(csvPath, 'utf-8');

  console.log('📄 Parsing CSV...');
  const parseResult = Papa.parse(csvContent, {
    header: false,
    skipEmptyLines: true,
    dynamicTyping: true,
  });

  console.log('🔄 Transforming data...');
  const contacts = transformData(parseResult.data);
  console.log(`   Transformed ${contacts.length} contact rows\n`);

  // ========================================================================
  // TEST 1: Strict Mode (No Data Quality Decisions)
  // ========================================================================
  console.log('═══════════════════════════════════════════════════════');
  console.log('🧪 TEST 1: Strict Mode (Checkboxes Unchecked)');
  console.log('═══════════════════════════════════════════════════════\n');

  // In strict mode, no transformations are applied.
  const strictValidation = validateTransformedContacts(contacts);
  const strictSuccess = strictValidation.successful.length;
  const strictFailed = strictValidation.failed.length;

  console.log(`✅ Success: ${strictSuccess} contacts`);
  console.log(`❌ Failed:  ${strictFailed} contacts`);

  if (strictFailed > 0) {
    console.log('\nFailed rows:');
    strictValidation.failed.forEach(err => {
      const reasons = err.errors.map(e => `${e.field}: ${e.message}`).join('; ');
      console.log(`  Row ${err.originalIndex + 4}: ${reasons}`);
    });
  }

  const test1Pass = strictSuccess === 5 && strictFailed === 2;
  console.log(`\n${test1Pass ? '✅ PASS' : '❌ FAIL'}: Expected 5 success, 2 failed\n`);

  // ========================================================================
  // TEST 2: Auto-Fill Organizations (Data Quality Feature)
  // ========================================================================
  console.log('═══════════════════════════════════════════════════════');
  console.log('🧪 TEST 2: Auto-Fill Organizations (Checkbox Checked)');
  console.log('═══════════════════════════════════════════════════════\n');

  // Apply transformations
  const { transformedContacts, autoFilledCount } = applyDataQualityTransformations(contacts, {
    importOrganizationsWithoutContacts: true,
  });

  // Validate the transformed data
  const autoFillValidation = validateTransformedContacts(transformedContacts);
  const autoFillSuccess = autoFillValidation.successful.length;
  const autoFillFailed = autoFillValidation.failed.length;

  console.log(`✅ Success:    ${autoFillSuccess} contacts`);
  console.log(`   Auto-filled: ${autoFilledCount} with "General Contact"`);
  console.log(`❌ Failed:     ${autoFillFailed} contacts`);

  if (autoFillFailed > 0) {
    console.log('\nFailed rows:');
    autoFillValidation.failed.forEach(err => {
      const reasons = err.errors.map(e => `${e.field}: ${e.message}`).join('; ');
      console.log(`  Row ${err.originalIndex + 4}: ${reasons}`);
    });
  }
  
  // Show transformed contacts
  console.log('\n📝 Auto-filled contacts:');
  transformedContacts.forEach((contact, i) => {
    if (contact.first_name === "General" && contact.last_name === "Contact") {
      console.log(`  Row ${i + 4}: "${contact.first_name} ${contact.last_name}" at ${contact.organization_name}`);
    }
  });

  const test2Pass = autoFillSuccess === 7 && autoFillFailed === 0 && autoFilledCount === 2;
  console.log(`\n${test2Pass ? '✅ PASS' : '❌ FAIL'}: Expected 7 success, 0 failed, 2 auto-filled\n`);

  // ========================================================================
  // FINAL RESULTS
  // ========================================================================
  console.log('═══════════════════════════════════════════════════════');
  console.log('🏁 FINAL RESULTS');
  console.log('═══════════════════════════════════════════════════════\n');

  const allPass = test1Pass && test2Pass;

  if (allPass) {
    console.log('✅ ALL TESTS PASSED!');
    console.log('\n✨ Data Quality Feature Working Correctly:');
    console.log('   • Strict mode rejects org-only entries (2 failed)');
    console.log('   • Auto-fill mode transforms org-only entries (0 failed)');
    console.log('   • "General Contact" placeholder created for 2 organizations\n');
    process.exit(0);
  } else {
    console.log('❌ SOME TESTS FAILED');
    console.log('\nReview results above for details\n');
    process.exit(1);
  }
}

// Run the test
runE2ETest().catch(error => {
  console.error('❌ Test error:', error);
  process.exit(1);
});
```
</UPDATED_EXISTING_FILE>

Finally, let's update `ContactImportDialog.tsx` to use the new shared helper.

<UPDATED_EXISTING_FILE: /home/krwhynot/projects/crispy-crm/src/atomic-crm/contacts/ContactImportDialog.tsx>
```typescript
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Progress } from "@/components/ui/progress";
import { Card, CardContent } from "@/components/ui/card";
import { Loader2, CheckCircle2, Users } from "lucide-react";
import { Form, useRefresh } from "ra-core";
import { Link } from "react-router-dom";
import { usePapaParse } from "../misc/usePapaParse";
import type { ContactImportSchema, ImportResult } from "./useContactImport";
import { useContactImport } from "./useContactImport";
import { mapHeadersToFields } from "./columnAliases";
import type { PreviewData, DataQualityDecisions } from "./ContactImportPreview";
import { ContactImportPreview } from "./ContactImportPreview";
import { ContactImportResult } from "./ContactImportResult";
import { isOrganizationOnlyEntry } from "./contactImport.logic";

import { FileInput } from "@/components/admin/file-input";
import { FileField } from "@/components/admin/file-field";
import * as React from "react";
import { useEffect, useState, useCallback } from "react";
import * as sampleCsv from "./contacts_export.csv?raw";

// Feature flag for enhanced import preview
const ENABLE_IMPORT_PREVIEW = true;

const SAMPLE_URL = `data:text/csv;name=crm_contacts_sample.csv;charset=utf-8,${encodeURIComponent(
  sampleCsv.default,
)}`;

type ContactImportModalProps = {
  open: boolean;
  onClose(): void;
};

export function ContactImportDialog({
  open,
  onClose,
}: ContactImportModalProps) {
  const refresh = useRefresh();
  const processBatchHook = useContactImport();

  // Preview state management (separate from parser state machine)
  const [showPreview, setShowPreview] = useState(false);
  const [previewConfirmed, setPreviewConfirmed] = useState(false);
  const [previewData, setPreviewData] = useState<PreviewData | null>(null);
  const [parsedData, setParsedData] = useState<ContactImportSchema[]>([]);
  const [dataQualityDecisions, setDataQualityDecisions] = useState<DataQualityDecisions>({
    importOrganizationsWithoutContacts: false,
    importContactsWithoutContactInfo: false,
  });

  // Import result state - accumulate across all batches
  const [importResult, setImportResult] = useState<ImportResult | null>(null);
  const [showResult, setShowResult] = useState(false);
  const accumulatedResultRef = React.useRef<{
    totalProcessed: number;
    successCount: number;
    skippedCount: number;
    failedCount: number;
    errors: ImportError[];
    startTime: Date | null;
  }>({
    totalProcessed: 0,
    successCount: 0,
    skippedCount: 0,
    failedCount: 0,
    errors: [],
    startTime: null,
  });
  const rowOffsetRef = React.useRef(0);  // Track absolute row position in CSV file

  // Transform headers using column aliases
  const transformHeaders = useCallback((headers: string[]) => {
    console.log('📋 [HEADER DEBUG] Original CSV headers:', headers);

    const mappings = mapHeadersToFields(headers);
    console.log('📋 [HEADER DEBUG] Header mappings:', mappings);

    const transformedHeaders: string[] = [];

    // Build list of transformed headers
    headers.forEach(header => {
      const mapped = mappings[header];

      // Handle special cases like full name split
      if (mapped === '_full_name_split_') {
        // For full name columns, we'll handle splitting in data transformation
        // Mark this header so we can identify it later
        transformedHeaders.push('_full_name_source_');
      } else {
        transformedHeaders.push(mapped || header);
      }
    });

    console.log('📋 [HEADER DEBUG] Transformed headers:', transformedHeaders);
    return transformedHeaders;
  }, []);

  // Handle preview mode
  const onPreview = useCallback((rows: ContactImportSchema[]) => {
    if (!ENABLE_IMPORT_PREVIEW) return;

    console.log('📊 [PREVIEW DEBUG] First parsed row:', JSON.stringify(rows[0], null, 2));
    console.log('📊 [PREVIEW DEBUG] Total rows:', rows.length);

    // Store parsed data for later use
    setParsedData(rows);

    // Run data quality analysis
    const organizationsWithoutContacts = findOrganizationsWithoutContacts(rows);
    const contactsWithoutContactInfo = findContactsWithoutContactInfo(rows);

    console.log('📊 [DATA QUALITY] Organizations without contacts:', organizationsWithoutContacts.length);
    console.log('📊 [DATA QUALITY] Contacts without contact info:', contactsWithoutContactInfo.length);

    // Generate preview data
    const preview: PreviewData = {
      mappings: [], // This would be populated from the header mappings
      sampleRows: rows.slice(0, 5),
      validCount: rows.length, // This would be calculated based on validation
      skipCount: 0,
      totalRows: rows.length,
      errors: [],
      warnings: [],
      newOrganizations: extractNewOrganizations(rows),
      newTags: extractNewTags(rows),
      hasErrors: false,
      lowConfidenceMappings: 0,
      organizationsWithoutContacts,
      contactsWithoutContactInfo,
    };

    setPreviewData(preview);
    setShowPreview(true);
  }, []);

  // Enhanced processBatch wrapper with result accumulation across batches
  const processBatch = useCallback(async (batch: ContactImportSchema[]) => {
    console.log('🔵 [IMPORT DEBUG] processBatch called with', batch.length, 'contacts, starting at row', rowOffsetRef.current + 1);

    // Set start time on first batch
    if (!accumulatedResultRef.current.startTime) {
      accumulatedResultRef.current.startTime = new Date();
    }

    try {
      console.log('🔵 [IMPORT DEBUG] Calling processBatchHook with data quality decisions:', dataQualityDecisions);
      const result = await processBatchHook(batch, {
        preview: false,
        startingRow: rowOffsetRef.current + 4,  // Pass correct starting row for this batch
        dataQualityDecisions,  // Pass user's data quality decisions
        onProgress: (current, total) => {
          // Progress tracking could be added here
        }
      });

      rowOffsetRef.current += batch.length;  // Increment offset for next batch

      console.log('🔵 [IMPORT DEBUG] processBatchHook completed. Result:', result);

      // Accumulate results across all batches
      accumulatedResultRef.current.totalProcessed += result.totalProcessed;
      accumulatedResultRef.current.successCount += result.successCount;
      accumulatedResultRef.current.skippedCount += result.skippedCount;
      accumulatedResultRef.current.failedCount += result.failedCount;
      accumulatedResultRef.current.errors.push(...result.errors);

      console.log('📊 [IMPORT DEBUG] Accumulated totals:', {
        totalProcessed: accumulatedResultRef.current.totalProcessed,
        successCount: accumulatedResultRef.current.successCount,
        failedCount: accumulatedResultRef.current.failedCount,
        errorCount: accumulatedResultRef.current.errors.length,
      });
    } catch (error: any) {
      console.error("🔴 [IMPORT DEBUG] Batch processing error:", error);
      const errorMessage = error.message || "A critical error occurred during batch processing.";
      const batchStartRow = rowOffsetRef.current + 1;

      // Add an error entry for each contact in the failed batch
      batch.forEach((contactData, index) => {
        accumulatedResultRef.current.errors.push({
          row: batchStartRow + index,
          data: contactData,
          errors: [{ field: "batch_processing", message: errorMessage }],
        });
      });

      // Count entire batch as failed
      accumulatedResultRef.current.totalProcessed += batch.length;
      accumulatedResultRef.current.failedCount += batch.length;
      rowOffsetRef.current += batch.length;  // Ensure offset is still incremented
    }
  }, [processBatchHook, dataQualityDecisions]);

  // Two separate importers: one for preview, one for actual import
  const previewImporter = usePapaParse<ContactImportSchema>({
    transformHeaders: transformHeaders,
    onPreview: onPreview,
    previewRowCount: 100,
  });

  const actualImporter = usePapaParse<ContactImportSchema>({
    batchSize: 10,
    processBatch,
    transformHeaders: transformHeaders,
    // No preview callbacks - this does the actual import
  });

  // Use the appropriate importer based on whether preview is enabled
  const { importer, parseCsv, reset } = ENABLE_IMPORT_PREVIEW
    ? previewImporter
    : actualImporter;

  const [file, setFile] = useState<File | null>(null);

  useEffect(() => {
    console.log('🔍 [STATE DEBUG] actualImporter.importer.state changed to:', actualImporter.importer.state);
    console.log('🔍 [STATE DEBUG] previewImporter.importer.state:', previewImporter.importer.state);
    console.log('🔍 [STATE DEBUG] showPreview:', showPreview, 'previewConfirmed:', previewConfirmed);
    console.log('🔍 [STATE DEBUG] Accumulated results:', {
      totalProcessed: accumulatedResultRef.current.totalProcessed,
      successCount: accumulatedResultRef.current.successCount,
      failedCount: accumulatedResultRef.current.failedCount,
      errorCount: accumulatedResultRef.current.errors.length,
    });

    // Monitor actualImporter for completion (not the preview one)
    if (actualImporter.importer.state === "complete") {
      console.log('✅ [IMPORT DEBUG] Import complete! Building final result...');

      const endTime = new Date();
      const startTime = accumulatedResultRef.current.startTime || endTime;

      // Build final ImportResult from accumulated data
      const finalResult: ImportResult = {
        totalProcessed: accumulatedResultRef.current.totalProcessed,
        successCount: accumulatedResultRef.current.successCount,
        skippedCount: accumulatedResultRef.current.skippedCount,
        failedCount: accumulatedResultRef.current.failedCount,
        errors: accumulatedResultRef.current.errors,
        duration: endTime.getTime() - startTime.getTime(),
        startTime: startTime,
        endTime: endTime,
      };

      console.log('📋 [IMPORT DEBUG] Final result:', finalResult);
      console.log('📋 [IMPORT DEBUG] About to show result dialog...');

      setImportResult(finalResult);
      setShowResult(true);
      refresh();
    }
  }, [actualImporter.importer.state, previewImporter.importer.state, showPreview, previewConfirmed, refresh]);

  const handleFileChange = (file: File | null) => {
    setFile(file);
  };

  const startImport = () => {
    if (!file) return;

    if (ENABLE_IMPORT_PREVIEW) {
      // Parse for preview first
      parseCsv(file);
    } else {
      // Direct import without preview
      parseCsv(file);
    }
  };

  // Handle preview confirmation
  const handlePreviewContinue = (decisions: DataQualityDecisions) => {
    console.log('🚀 [IMPORT DEBUG] handlePreviewContinue called with decisions:', decisions);
    console.log('🚀 [IMPORT DEBUG] File:', file?.name, 'Size:', file?.size);

    // Store data quality decisions for validation logic
    setDataQualityDecisions(decisions);

    // Reset accumulated results for new import
    accumulatedResultRef.current = {
      totalProcessed: 0,
      successCount: 0,
      skippedCount: 0,
      failedCount: 0,
      errors: [],
      startTime: null,
    };
    rowOffsetRef.current = 0;  // Reset row offset for new import

    setShowPreview(false);
    setPreviewConfirmed(true);
    // Use the actualImporter to parse the file for real import
    if (file) {
      console.log('🚀 [IMPORT DEBUG] Calling actualImporter.parseCsv with file:', file.name);
      actualImporter.parseCsv(file);
    } else {
      console.error("Cannot continue import: file is missing");
    }
  };

  // Handle preview cancellation
  const handlePreviewCancel = () => {
    setShowPreview(false);
    setPreviewData(null);
    setParsedData([]);
    previewImporter.reset();
    actualImporter.reset();
  };

  const handleClose = () => {
    previewImporter.reset();
    actualImporter.reset();
    setShowPreview(false);
    setShowResult(false);
    setPreviewData(null);
    setParsedData([]);
    setImportResult(null);

    // Reset accumulated results
    accumulatedResultRef.current = {
      totalProcessed: 0,
      successCount: 0,
      skippedCount: 0,
      failedCount: 0,
      errors: [],
      startTime: null,
    };
    rowOffsetRef.current = 0;  // Reset row offset

    onClose();
  };

  const handleReset = (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    previewImporter.reset();
    actualImporter.reset();
    setShowPreview(false);
    setPreviewData(null);
    setParsedData([]);
  };

  return (
    <>
      {/* Main Import Dialog */}
      <Dialog open={open && !showPreview && !showResult} onOpenChange={handleClose}>
        <DialogContent className="max-w-2xl">
          <Form className="flex flex-col gap-4">
            <DialogHeader>
              <DialogTitle>Import</DialogTitle>
            </DialogHeader>

            <div className="flex flex-col space-y-2">
              {/* Show progress for actualImporter when importing after preview, or regular importer otherwise */}
              {((actualImporter.importer.state === "running" && ENABLE_IMPORT_PREVIEW && previewConfirmed) ||
                (importer.state === "running" && !ENABLE_IMPORT_PREVIEW)) && (() => {
                // Use the appropriate importer based on context
                const activeImporter = (ENABLE_IMPORT_PREVIEW && previewConfirmed)
                  ? actualImporter.importer
                  : importer;

                return (
                <Card className="border-primary/20">
                  <CardContent className="pt-6 space-y-4">
                    {/* Progress Header */}
                    <div className="flex items-center gap-3">
                      <div className="flex items-center gap-2">
                        <Loader2 className="h-5 w-5 animate-spin text-primary" />
                        <span className="font-medium">Processing CSV Import</span>
                      </div>
                      <div className="ml-auto">
                        <button
                          onClick={handleReset}
                          className="text-sm text-destructive hover:underline"
                        >
                          Cancel Import
                        </button>
                      </div>
                    </div>

                    {/* Progress Bar */}
                    <div className="space-y-2">
                      <Progress value={(activeImporter.importCount / activeImporter.rowCount) * 100} className="h-3" />
                      <div className="flex justify-between text-sm text-muted-foreground">
                        <span>
                          Batch {Math.ceil(activeImporter.importCount / 10) || 1} of {Math.ceil(activeImporter.rowCount / 10)}
                        </span>
                        <span>
                          {Math.round((activeImporter.importCount / activeImporter.rowCount) * 100)}% Complete
                        </span>
                      </div>
                    </div>

                    {/* Statistics */}
                    <div className="grid grid-cols-3 gap-4 pt-2">
                      <div className="space-y-1">
                        <p className="text-sm font-medium">Processed</p>
                        <p className="text-2xl font-bold text-primary">
                          {activeImporter.importCount}
                        </p>
                        <p className="text-xs text-muted-foreground">of {activeImporter.rowCount} contacts</p>
                      </div>

                      <div className="space-y-1">
                        <p className="text-sm font-medium">Errors</p>
                        <p className="text-2xl font-bold text-destructive">
                          {activeImporter.errorCount}
                        </p>
                        <p className="text-xs text-muted-foreground">failed imports</p>
                      </div>

                      <div className="space-y-1">
                        <p className="text-sm font-medium">Time Remaining</p>
                        <p className="text-2xl font-bold">
                          {activeImporter.remainingTime !== null
                            ? millisecondsToTime(activeImporter.remainingTime)
                            : "Calculating..."}
                        </p>
                        <p className="text-xs text-muted-foreground">estimated</p>
                      </div>
                    </div>

                    {/* Warning Message */}
                    <Alert className="border-warning/50 bg-warning/10">
                      <AlertDescription className="text-sm">
                        Please keep this tab open until the import completes
                      </AlertDescription>
                    </Alert>
                  </CardContent>
                </Card>
                );
              })()}

              {importer.state === "error" && (
                <Alert variant="destructive">
                  <AlertDescription>
                    Failed to import this file, please make sure your provided a
                    valid CSV file.
                  </AlertDescription>
                </Alert>
              )}

              {/* Show completion for both actualImporter (with preview) and importer (without preview) */}
              {((actualImporter.importer.state === "complete" && ENABLE_IMPORT_PREVIEW) ||
                (importer.state === "complete" && !ENABLE_IMPORT_PREVIEW)) && (() => {
                // Use the appropriate importer based on context
                const completedImporter = (ENABLE_IMPORT_PREVIEW && actualImporter.importer.state === "complete")
                  ? actualImporter.importer
                  : importer;

                return (
                <Card className="border-success/20 bg-success/5">
                  <CardContent className="pt-6">
                    <div className="flex flex-col items-center text-center space-y-4">
                      <CheckCircle2 className="h-12 w-12 text-success" />
                      <div className="space-y-2">
                        <h3 className="text-lg font-semibold">Import Complete!</h3>
                        <p className="text-sm text-muted-foreground">
                          Successfully processed {completedImporter.importCount} contacts
                        </p>
                      </div>
                      <div className="flex gap-4 text-sm">
                        <div className="flex items-center gap-1">
                          <Users className="h-4 w-4 text-success" />
                          <span className="font-medium">{completedImporter.importCount} imported</span>
                        </div>
                        {completedImporter.errorCount > 0 && (
                          <div className="flex items-center gap-1">
                            <span className="text-destructive">• {completedImporter.errorCount} errors</span>
                          </div>
                        )}
                      </div>
                    </div>
                  </CardContent>
                </Card>
                );
              })()}

              {importer.state === "idle" && (
                <>
                  <Alert>
                    <AlertDescription className="flex flex-col gap-4">
                      Here is a sample CSV file you can use as a template
                      <Button asChild variant="outline" size="sm">
                        <Link
                          to={SAMPLE_URL}
                          download={"crm_contacts_sample.csv"}
                        >
                          Download CSV sample
                        </Link>
                      </Button>{" "}
                    </AlertDescription>
                  </Alert>

                  <FileInput
                    source="csv"
                    label="CSV File"
                    accept={{ "text/csv": [".csv"] }}
                    onChange={handleFileChange}
                  >
                    <FileField source="src" title="title" target="_blank" />
                  </FileInput>
                </>
              )}
            </div>
          </Form>

          <div className="flex justify-start pt-6 gap-2">
            {importer.state === "idle" ? (
              <Button onClick={startImport} disabled={!file}>
                Import
              </Button>
            ) : (
              <Button
                variant="outline"
                onClick={handleClose}
                disabled={importer.state === "running"}
              >
                Close
              </Button>
            )}
          </div>
        </DialogContent>
      </Dialog>

      {/* Preview Dialog (when feature flag is enabled) */}
      {ENABLE_IMPORT_PREVIEW && showPreview && previewData && (
        <Dialog open={showPreview} onOpenChange={() => setShowPreview(false)}>
          <DialogContent className="max-w-4xl h-[90vh] flex flex-col p-0">
            <DialogHeader className="px-6 pt-6 pb-4 border-b">
              <DialogTitle>Import Preview</DialogTitle>
            </DialogHeader>
            <div className="flex-1 overflow-y-auto px-6">
              <ContactImportPreview
                preview={previewData}
                onContinue={handlePreviewContinue}
                onCancel={handlePreviewCancel}
              />
            </div>
          </DialogContent>
        </Dialog>
      )}

      {/* Enhanced Result Dialog */}
      {importResult && (
        <ContactImportResult
          open={showResult}
          onClose={() => {
            setShowResult(false);
            setImportResult(null);
            handleClose();
          }}
          result={importResult}
          allowRetry={false}
        />
      )}
    </>
  );
}

function millisecondsToTime(ms: number) {
  const seconds = Math.floor((ms / 1000) % 60);
  const minutes = Math.floor((ms / (60 * 1000)) % 60);

  return `${minutes}m ${seconds}s`;
}

// Helper function to extract unique organizations from parsed data
function extractNewOrganizations(rows: ContactImportSchema[]): string[] {
  const organizations = new Set<string>();
  rows.forEach(row => {
    if (row.organization_name) {
      organizations.add(row.organization_name.trim());
    }
  });
  return Array.from(organizations);
}

// Helper function to extract unique tags from parsed data
function extractNewTags(rows: ContactImportSchema[]): string[] {
  const tags = new Set<string>();
  rows.forEach(row => {
    if (row.tags) {
      row.tags.split(',').forEach(tag => {
        const trimmed = tag.trim();
        if (trimmed) {
          tags.add(trimmed);
        }
      });
    }
  });
  return Array.from(tags);
}

// Helper function to find organizations without contact persons
// These are rows with organization_name but no first_name AND no last_name
function findOrganizationsWithoutContacts(rows: ContactImportSchema[]): Array<{ organization_name: string; row: number }> {
  const orgOnlyEntries: Array<{ organization_name: string; row: number }> = [];

  rows.forEach((row, index) => {
    if (isOrganizationOnlyEntry(row)) {
      orgOnlyEntries.push({
        organization_name: String(row.organization_name).trim(),
        row: index + 4, // +3 for header rows, +1 for 1-indexed
      });
    }
  });

  return orgOnlyEntries;
}

// Helper function to find contacts without email or phone
// These are contacts with a name but missing ALL email fields AND ALL phone fields
function findContactsWithoutContactInfo(rows: ContactImportSchema[]): Array<{ name: string; organization_name: string; row: number }> {
  const contactsWithoutInfo: Array<{ name: string; organization_name: string; row: number }> = [];

  rows.forEach((row, index) => {
    const hasFirstName = row.first_name && String(row.first_name).trim();
    const hasLastName = row.last_name && String(row.last_name).trim();
    const hasName = hasFirstName || hasLastName;

    // Check all email fields
    const hasEmail = (
      (row.email_work && String(row.email_work).trim()) ||
      (row.email_home && String(row.email_home).trim()) ||
      (row.email_other && String(row.email_other).trim())
    );

    // Check all phone fields
    const hasPhone = (
      (row.phone_work && String(row.phone_work).trim()) ||
      (row.phone_home && String(row.phone_home).trim()) ||
      (row.phone_other && String(row.phone_other).trim())
    );

    // If has name but NO email AND NO phone
    if (hasName && !hasEmail && !hasPhone) {
      const name = [
        hasFirstName ? String(row.first_name).trim() : '',
        hasLastName ? String(row.last_name).trim() : ''
      ].filter(Boolean).join(' ') || 'Unknown';

      contactsWithoutInfo.push({
        name,
        organization_name: row.organization_name ? String(row.organization_name).trim() : '',
        row: index + 4, // +3 for header rows, +1 for 1-indexed
      });
    }
  });

  return contactsWithoutInfo;
}
```
</UPDATED_EXISTING_FILE>
</GENERATED-CODE>
