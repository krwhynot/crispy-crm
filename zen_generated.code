<GENERATED-CODE>
I will now apply the recommended changes for tasks 1.1, 2.1, and 2.2.

1.  Update `src/lib/color-types.ts` to add a deprecation notice to `HEX_TO_SEMANTIC_MAP` and correct the `hexFallback` values for the new earth-tone tags.
2.  Update `src/index.css` to standardize the dark mode `--destructive` color definition.

<UPDATED_EXISTING_FILE: src/lib/color-types.ts>
/**
 * Color system type definitions for the Atomic CRM application
 */

/**
 * Available tag color names in the new semantic color system
 */
export type TagColorName =
  | 'warm'
  | 'yellow'
  | 'pink'
  | 'green'
  | 'teal'
  | 'blue'
  | 'purple'
  | 'gray'
  | 'clay'
  | 'sage'
  | 'amber'
  | 'cocoa';

/**
 * Semantic color tokens for theme colors
 * Used for mapping color names to CSS variables or classes
 */
export type SemanticColorToken = {
  name: TagColorName;
  cssClass: string;
  hexFallback: string;
};

/**
 * Legacy hex color to semantic color mapping
 * Used during the migration transition period
 * @deprecated This map is for transitional purposes only. All new development should use semantic color names. This will be removed after data migration is complete.
 */
export const HEX_TO_SEMANTIC_MAP: Record<string, TagColorName> = {
  '#eddcd2': 'warm',
  '#fff1e6': 'yellow',
  '#fde2e4': 'pink',
  '#fad2e1': 'pink',
  '#c5dedd': 'teal',
  '#dbe7e4': 'green',
  '#f0efeb': 'gray',
  '#d6e2e9': 'blue',
  '#bcd4e6': 'blue',
  '#99c1de': 'teal',
  // Additional mappings for test compatibility
  '#ef4444': 'warm', // Map red to warm
  '#3b82f6': 'blue', // Map blue to blue
};

/**
 * Semantic color definitions with CSS classes
 */
export const SEMANTIC_COLORS: Record<TagColorName, SemanticColorToken> = {
  warm: {
    name: 'warm',
    cssClass: 'tag-warm',
    hexFallback: '#eddcd2', // NOTE: This may need verification against --tag-warm-bg
  },
  yellow: {
    name: 'yellow',
    cssClass: 'tag-yellow',
    hexFallback: '#fff1e6', // NOTE: This may need verification against --tag-yellow-bg
  },
  pink: {
    name: 'pink',
    cssClass: 'tag-pink',
    hexFallback: '#fde2e4', // NOTE: This may need verification against --tag-pink-bg
  },
  green: {
    name: 'green',
    cssClass: 'tag-green',
    hexFallback: '#dbe7e4', // NOTE: This may need verification against --tag-green-bg
  },
  teal: {
    name: 'teal',
    cssClass: 'tag-teal',
    hexFallback: '#c5dedd', // NOTE: This may need verification against --tag-teal-bg
  },
  blue: {
    name: 'blue',
    cssClass: 'tag-blue',
    hexFallback: '#d6e2e9', // NOTE: This may need verification against --tag-blue-bg
  },
  purple: {
    name: 'purple',
    cssClass: 'tag-purple',
    hexFallback: '#8b5cf6', // NOTE: This may need verification against --tag-purple-bg
  },
  gray: {
    name: 'gray',
    cssClass: 'tag-gray',
    hexFallback: '#f0efeb', // NOTE: This may need verification against --tag-gray-bg
  },
  clay: {
    name: 'clay',
    cssClass: 'tag-clay',
    hexFallback: '#f0d9c0', // Corrected from #d9b89c to match oklch(92% 0.04 48)
  },
  sage: {
    name: 'sage',
    cssClass: 'tag-sage',
    hexFallback: '#e8eedf', // Corrected from #c8d5b9 to match oklch(94% 0.03 112)
  },
  amber: {
    name: 'amber',
    cssClass: 'tag-amber',
    hexFallback: '#f9eeda', // Corrected from #f5e6d3 to match oklch(96% 0.04 80)
  },
  cocoa: {
    name: 'cocoa',
    cssClass: 'tag-cocoa',
    hexFallback: '#e9dcd0', // Corrected from #d4c5b9 to match oklch(90% 0.04 74)
  },
};

/**
 * List of valid tag color names
 */
export const VALID_TAG_COLORS: TagColorName[] = [
  'warm',
  'green',
  'teal',
  'blue',
  'purple',
  'yellow',
  'gray',
  'pink',
  'clay',
  'sage',
  'amber',
  'cocoa',
];
</UPDATED_EXISTING_FILE>

<UPDATED_EXISTING_FILE: src/index.css>
.dark {
  /* Inverted Neutrals - OKLCH format */
  --neutral-50:  oklch(23.4% 0.021 288.0);  /* Darkest (was 900) */
  --neutral-100: oklch(31.5% 0.019 287.6);  /* Dark (was 800) */
  --neutral-200: oklch(39.6% 0.017 287.2);  /* (was 700) */
  --neutral-300: oklch(47.7% 0.015 286.8);  /* (was 600) */
  --neutral-400: oklch(55.8% 0.013 286.4);  /* (was 500) */
  --neutral-500: oklch(63.9% 0.011 286.0);  /* (was 400) */
  --neutral-600: oklch(72.1% 0.009 285.6);  /* (was 300) */
  --neutral-700: oklch(80.2% 0.007 285.2);  /* (was 200) */
  --neutral-800: oklch(88.4% 0.005 284.8);  /* (was 100) */
  --neutral-900: oklch(97.1% 0.002 284.5);  /* Lightest (was 50) */

  /* Adjusted Brand Colors for Dark Mode */
  --brand-100: oklch(26.3% 0.048 125);      /* Darker tint */
  --brand-300: oklch(45.9% 0.083 125);      /* Darker soft */
  --brand-500: oklch(74% 0.12 125);         /* Keep identity color */
  --brand-650: oklch(70% 0.12 125);         /* Hover state (lighter in dark) */
  --brand-700: oklch(65% 0.12 125);         /* Primary (lighter for dark bg) */
  --brand-750: oklch(60% 0.11 125);         /* Active state */
  --brand-800: var(--brand-300);            /* Use lighter for hover */

  /* Adjusted Accent Colors for Dark Mode */
  --accent-purple: oklch(56% 0.18 295);           /* Darker purple for WCAG AA with white text */
  --destructive-dark: oklch(70.4% 0.191 22.216);  /* Foundational token for dark destructive */

  /* Foundation colors (semantic mappings) */
  --background: var(--neutral-50);          /* Dark background */
  --foreground: var(--neutral-900);         /* Light text */
  --card: var(--neutral-100);              /* Card surface */
  --card-foreground: var(--neutral-900);    /* Card text */
  --popover: var(--neutral-100);           /* Popover surface */
  --popover-foreground: var(--neutral-900); /* Popover text */

  /* Interactive colors */
  --primary: var(--brand-700);              /* Primary buttons */
  --primary-foreground: oklch(0.985 0 0);   /* White text */
  --secondary: var(--neutral-200);          /* Secondary buttons */
  --secondary-foreground: var(--neutral-900); /* Light text */
  --muted: var(--neutral-200);             /* Muted surfaces */
  --muted-foreground: var(--neutral-600);   /* Muted text */
  --accent: var(--accent-purple);          /* Accent color */
  --accent-foreground: oklch(0.985 0 0);    /* White text */
  --destructive: var(--destructive-dark);

  /* Overlay/backdrop colors - dark mode */
  --overlay: oklch(0 0 0 / 70%);              /* Higher opacity in dark mode */
</UPDATED_EXISTING_FILE>
</GENERATED-CODE>
